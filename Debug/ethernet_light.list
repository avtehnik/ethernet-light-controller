
ethernet_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080013b8  080013b8  000113b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080013f4  080013f4  000113f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013f8  080013f8  000113f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080013fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000140  20000004  08001400  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000144  08001400  00020144  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012190  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000230d  00000000  00000000  000321bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000071fa  00000000  00000000  000344c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000888  00000000  00000000  0003b6c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000cb0  00000000  00000000  0003bf50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005679  00000000  00000000  0003cc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002e7f  00000000  00000000  00042279  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000450f8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001a0c  00000000  00000000  00045174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080013a0 	.word	0x080013a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080013a0 	.word	0x080013a0

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000234:	b510      	push	{r4, lr}
 8000236:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000238:	f000 fc76 	bl	8000b28 <HAL_RCC_GetHCLKFreq>
 800023c:	21fa      	movs	r1, #250	; 0xfa
 800023e:	0089      	lsls	r1, r1, #2
 8000240:	f7ff ff6c 	bl	800011c <__udivsi3>
 8000244:	f000 f856 	bl	80002f4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000248:	2001      	movs	r0, #1
 800024a:	2200      	movs	r2, #0
 800024c:	0021      	movs	r1, r4
 800024e:	4240      	negs	r0, r0
 8000250:	f000 f820 	bl	8000294 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000254:	2000      	movs	r0, #0
 8000256:	bd10      	pop	{r4, pc}

08000258 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000258:	2310      	movs	r3, #16
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <HAL_Init+0x1c>)
{
 800025c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000260:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000262:	430b      	orrs	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000266:	f7ff ffe5 	bl	8000234 <HAL_InitTick>
  HAL_MspInit();
 800026a:	f000 ff51 	bl	8001110 <HAL_MspInit>
}
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000020 	.word	0x20000020

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	20000020 	.word	0x20000020

08000294 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000298:	2800      	cmp	r0, #0
 800029a:	da14      	bge.n	80002c6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800029c:	230f      	movs	r3, #15
 800029e:	b2c0      	uxtb	r0, r0
 80002a0:	4003      	ands	r3, r0
 80002a2:	3b08      	subs	r3, #8
 80002a4:	4a11      	ldr	r2, [pc, #68]	; (80002ec <HAL_NVIC_SetPriority+0x58>)
 80002a6:	089b      	lsrs	r3, r3, #2
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	189b      	adds	r3, r3, r2
 80002ac:	2203      	movs	r2, #3
 80002ae:	4010      	ands	r0, r2
 80002b0:	4090      	lsls	r0, r2
 80002b2:	32fc      	adds	r2, #252	; 0xfc
 80002b4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002b6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ba:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	69dc      	ldr	r4, [r3, #28]
 80002be:	43ac      	bics	r4, r5
 80002c0:	4321      	orrs	r1, r4
 80002c2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002c4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c6:	2503      	movs	r5, #3
 80002c8:	0883      	lsrs	r3, r0, #2
 80002ca:	4028      	ands	r0, r5
 80002cc:	40a8      	lsls	r0, r5
 80002ce:	35fc      	adds	r5, #252	; 0xfc
 80002d0:	002e      	movs	r6, r5
 80002d2:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <HAL_NVIC_SetPriority+0x5c>)
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	189b      	adds	r3, r3, r2
 80002d8:	22c0      	movs	r2, #192	; 0xc0
 80002da:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002dc:	4029      	ands	r1, r5
 80002de:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e0:	0092      	lsls	r2, r2, #2
 80002e2:	589c      	ldr	r4, [r3, r2]
 80002e4:	43b4      	bics	r4, r6
 80002e6:	4321      	orrs	r1, r4
 80002e8:	5099      	str	r1, [r3, r2]
 80002ea:	e7eb      	b.n	80002c4 <HAL_NVIC_SetPriority+0x30>
 80002ec:	e000ed00 	.word	0xe000ed00
 80002f0:	e000e100 	.word	0xe000e100

080002f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002f4:	4a09      	ldr	r2, [pc, #36]	; (800031c <HAL_SYSTICK_Config+0x28>)
 80002f6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80002f8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d80d      	bhi.n	800031a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fe:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000302:	4808      	ldr	r0, [pc, #32]	; (8000324 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000304:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000306:	6a03      	ldr	r3, [r0, #32]
 8000308:	0609      	lsls	r1, r1, #24
 800030a:	021b      	lsls	r3, r3, #8
 800030c:	0a1b      	lsrs	r3, r3, #8
 800030e:	430b      	orrs	r3, r1
 8000310:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000312:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000314:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000316:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000318:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800031a:	4770      	bx	lr
 800031c:	00ffffff 	.word	0x00ffffff
 8000320:	e000e010 	.word	0xe000e010
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000328:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800032a:	680b      	ldr	r3, [r1, #0]
{ 
 800032c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 800032e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000330:	2300      	movs	r3, #0
{ 
 8000332:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000334:	9a02      	ldr	r2, [sp, #8]
 8000336:	40da      	lsrs	r2, r3
 8000338:	d101      	bne.n	800033e <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800033a:	b007      	add	sp, #28
 800033c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800033e:	2201      	movs	r2, #1
 8000340:	409a      	lsls	r2, r3
 8000342:	9203      	str	r2, [sp, #12]
 8000344:	9903      	ldr	r1, [sp, #12]
 8000346:	9a02      	ldr	r2, [sp, #8]
 8000348:	400a      	ands	r2, r1
 800034a:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800034c:	d100      	bne.n	8000350 <HAL_GPIO_Init+0x28>
 800034e:	e08c      	b.n	800046a <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000350:	9a01      	ldr	r2, [sp, #4]
 8000352:	2110      	movs	r1, #16
 8000354:	6852      	ldr	r2, [r2, #4]
 8000356:	0016      	movs	r6, r2
 8000358:	438e      	bics	r6, r1
 800035a:	2e02      	cmp	r6, #2
 800035c:	d10e      	bne.n	800037c <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800035e:	2507      	movs	r5, #7
 8000360:	401d      	ands	r5, r3
 8000362:	00ad      	lsls	r5, r5, #2
 8000364:	3901      	subs	r1, #1
 8000366:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000368:	08dc      	lsrs	r4, r3, #3
 800036a:	00a4      	lsls	r4, r4, #2
 800036c:	1904      	adds	r4, r0, r4
 800036e:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000370:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000372:	9901      	ldr	r1, [sp, #4]
 8000374:	6909      	ldr	r1, [r1, #16]
 8000376:	40a9      	lsls	r1, r5
 8000378:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800037a:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800037c:	2403      	movs	r4, #3
 800037e:	005f      	lsls	r7, r3, #1
 8000380:	40bc      	lsls	r4, r7
 8000382:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000384:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000386:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000388:	4025      	ands	r5, r4
 800038a:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800038c:	2503      	movs	r5, #3
 800038e:	4015      	ands	r5, r2
 8000390:	40bd      	lsls	r5, r7
 8000392:	4661      	mov	r1, ip
 8000394:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000396:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000398:	2e01      	cmp	r6, #1
 800039a:	d80f      	bhi.n	80003bc <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800039c:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 800039e:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003a0:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003a2:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003a4:	40bd      	lsls	r5, r7
 80003a6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003a8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003aa:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003ac:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003ae:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003b0:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003b2:	2101      	movs	r1, #1
 80003b4:	400d      	ands	r5, r1
 80003b6:	409d      	lsls	r5, r3
 80003b8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80003ba:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80003bc:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003be:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003c0:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003c2:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003c4:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003c6:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003c8:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003ca:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80003cc:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003ce:	420a      	tst	r2, r1
 80003d0:	d04b      	beq.n	800046a <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d2:	2101      	movs	r1, #1
 80003d4:	4c26      	ldr	r4, [pc, #152]	; (8000470 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003d6:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d8:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003da:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003dc:	430d      	orrs	r5, r1
 80003de:	61a5      	str	r5, [r4, #24]
 80003e0:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 80003e2:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e4:	400c      	ands	r4, r1
 80003e6:	9405      	str	r4, [sp, #20]
 80003e8:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003ea:	240f      	movs	r4, #15
 80003ec:	4921      	ldr	r1, [pc, #132]	; (8000474 <HAL_GPIO_Init+0x14c>)
 80003ee:	00ad      	lsls	r5, r5, #2
 80003f0:	00b6      	lsls	r6, r6, #2
 80003f2:	186d      	adds	r5, r5, r1
 80003f4:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003f6:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 80003f8:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003fa:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003fc:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003fe:	2400      	movs	r4, #0
 8000400:	4288      	cmp	r0, r1
 8000402:	d00c      	beq.n	800041e <HAL_GPIO_Init+0xf6>
 8000404:	491c      	ldr	r1, [pc, #112]	; (8000478 <HAL_GPIO_Init+0x150>)
 8000406:	3401      	adds	r4, #1
 8000408:	4288      	cmp	r0, r1
 800040a:	d008      	beq.n	800041e <HAL_GPIO_Init+0xf6>
 800040c:	491b      	ldr	r1, [pc, #108]	; (800047c <HAL_GPIO_Init+0x154>)
 800040e:	3401      	adds	r4, #1
 8000410:	4288      	cmp	r0, r1
 8000412:	d004      	beq.n	800041e <HAL_GPIO_Init+0xf6>
 8000414:	491a      	ldr	r1, [pc, #104]	; (8000480 <HAL_GPIO_Init+0x158>)
 8000416:	3403      	adds	r4, #3
 8000418:	4288      	cmp	r0, r1
 800041a:	d100      	bne.n	800041e <HAL_GPIO_Init+0xf6>
 800041c:	3c02      	subs	r4, #2
 800041e:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000420:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000422:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000424:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000426:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000428:	4c16      	ldr	r4, [pc, #88]	; (8000484 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800042a:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 800042c:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800042e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000430:	03d1      	lsls	r1, r2, #15
 8000432:	d401      	bmi.n	8000438 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000434:	003e      	movs	r6, r7
 8000436:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000438:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800043a:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 800043c:	9e00      	ldr	r6, [sp, #0]
 800043e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000440:	0391      	lsls	r1, r2, #14
 8000442:	d401      	bmi.n	8000448 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000444:	003e      	movs	r6, r7
 8000446:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000448:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800044a:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 800044c:	9e00      	ldr	r6, [sp, #0]
 800044e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000450:	02d1      	lsls	r1, r2, #11
 8000452:	d401      	bmi.n	8000458 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000454:	003e      	movs	r6, r7
 8000456:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000458:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800045a:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 800045c:	9f00      	ldr	r7, [sp, #0]
 800045e:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000460:	0292      	lsls	r2, r2, #10
 8000462:	d401      	bmi.n	8000468 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000464:	402e      	ands	r6, r5
 8000466:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000468:	60e7      	str	r7, [r4, #12]
    position++;
 800046a:	3301      	adds	r3, #1
 800046c:	e762      	b.n	8000334 <HAL_GPIO_Init+0xc>
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	40021000 	.word	0x40021000
 8000474:	40010000 	.word	0x40010000
 8000478:	48000400 	.word	0x48000400
 800047c:	48000800 	.word	0x48000800
 8000480:	48000c00 	.word	0x48000c00
 8000484:	40010400 	.word	0x40010400

08000488 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000488:	2a00      	cmp	r2, #0
 800048a:	d001      	beq.n	8000490 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800048c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800048e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000490:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000492:	e7fc      	b.n	800048e <HAL_GPIO_WritePin+0x6>

08000494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8000498:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800049a:	2c00      	cmp	r4, #0
 800049c:	d03f      	beq.n	800051e <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800049e:	0025      	movs	r5, r4
 80004a0:	3541      	adds	r5, #65	; 0x41
 80004a2:	782b      	ldrb	r3, [r5, #0]
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d105      	bne.n	80004b6 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80004aa:	0022      	movs	r2, r4
 80004ac:	3240      	adds	r2, #64	; 0x40
 80004ae:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80004b0:	0020      	movs	r0, r4
 80004b2:	f000 fe45 	bl	8001140 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80004b6:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80004b8:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80004ba:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80004bc:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80004be:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	68a6      	ldr	r6, [r4, #8]
 80004c4:	438a      	bics	r2, r1
 80004c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80004c8:	6861      	ldr	r1, [r4, #4]
 80004ca:	4a1a      	ldr	r2, [pc, #104]	; (8000534 <HAL_I2C_Init+0xa0>)
 80004cc:	400a      	ands	r2, r1
 80004ce:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80004d0:	6899      	ldr	r1, [r3, #8]
 80004d2:	4a19      	ldr	r2, [pc, #100]	; (8000538 <HAL_I2C_Init+0xa4>)
 80004d4:	4011      	ands	r1, r2
 80004d6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80004d8:	2801      	cmp	r0, #1
 80004da:	d121      	bne.n	8000520 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	0209      	lsls	r1, r1, #8
 80004e0:	4331      	orrs	r1, r6
 80004e2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80004e4:	6858      	ldr	r0, [r3, #4]
 80004e6:	4915      	ldr	r1, [pc, #84]	; (800053c <HAL_I2C_Init+0xa8>)
 80004e8:	4301      	orrs	r1, r0
 80004ea:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80004ec:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80004ee:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80004f0:	400a      	ands	r2, r1
 80004f2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80004f4:	6961      	ldr	r1, [r4, #20]
 80004f6:	6922      	ldr	r2, [r4, #16]
 80004f8:	430a      	orrs	r2, r1
 80004fa:	69a1      	ldr	r1, [r4, #24]
 80004fc:	0209      	lsls	r1, r1, #8
 80004fe:	430a      	orrs	r2, r1
 8000500:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000502:	6a21      	ldr	r1, [r4, #32]
 8000504:	69e2      	ldr	r2, [r4, #28]
 8000506:	430a      	orrs	r2, r1
 8000508:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800050a:	2201      	movs	r2, #1
 800050c:	6819      	ldr	r1, [r3, #0]
 800050e:	430a      	orrs	r2, r1
 8000510:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000512:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000514:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000516:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000518:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800051a:	3442      	adds	r4, #66	; 0x42
 800051c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800051e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000520:	2184      	movs	r1, #132	; 0x84
 8000522:	0209      	lsls	r1, r1, #8
 8000524:	4331      	orrs	r1, r6
 8000526:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000528:	2802      	cmp	r0, #2
 800052a:	d1db      	bne.n	80004e4 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0109      	lsls	r1, r1, #4
 8000530:	6059      	str	r1, [r3, #4]
 8000532:	e7d7      	b.n	80004e4 <HAL_I2C_Init+0x50>
 8000534:	f0ffffff 	.word	0xf0ffffff
 8000538:	ffff7fff 	.word	0xffff7fff
 800053c:	02008000 	.word	0x02008000

08000540 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000542:	0004      	movs	r4, r0
 8000544:	3441      	adds	r4, #65	; 0x41
 8000546:	7822      	ldrb	r2, [r4, #0]
{
 8000548:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800054a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800054c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800054e:	2a20      	cmp	r2, #32
 8000550:	d118      	bne.n	8000584 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000552:	001d      	movs	r5, r3
 8000554:	3540      	adds	r5, #64	; 0x40
 8000556:	782e      	ldrb	r6, [r5, #0]
 8000558:	2e01      	cmp	r6, #1
 800055a:	d013      	beq.n	8000584 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 800055c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800055e:	3022      	adds	r0, #34	; 0x22
 8000560:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000562:	681e      	ldr	r6, [r3, #0]
 8000564:	3823      	subs	r0, #35	; 0x23
 8000566:	4386      	bics	r6, r0
 8000568:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800056a:	681e      	ldr	r6, [r3, #0]
 800056c:	4f06      	ldr	r7, [pc, #24]	; (8000588 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 800056e:	403e      	ands	r6, r7
 8000570:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000572:	681e      	ldr	r6, [r3, #0]
 8000574:	4331      	orrs	r1, r6
 8000576:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000578:	6819      	ldr	r1, [r3, #0]
 800057a:	4308      	orrs	r0, r1
 800057c:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800057e:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000580:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000582:	7028      	strb	r0, [r5, #0]
  }
}
 8000584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	ffffefff 	.word	0xffffefff

0800058c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800058e:	0005      	movs	r5, r0
 8000590:	3541      	adds	r5, #65	; 0x41
 8000592:	782a      	ldrb	r2, [r5, #0]
{
 8000594:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000596:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000598:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800059a:	2a20      	cmp	r2, #32
 800059c:	d117      	bne.n	80005ce <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800059e:	001c      	movs	r4, r3
 80005a0:	3440      	adds	r4, #64	; 0x40
 80005a2:	7826      	ldrb	r6, [r4, #0]
 80005a4:	2e01      	cmp	r6, #1
 80005a6:	d012      	beq.n	80005ce <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80005a8:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80005aa:	3022      	adds	r0, #34	; 0x22
 80005ac:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 80005ae:	681e      	ldr	r6, [r3, #0]
 80005b0:	3823      	subs	r0, #35	; 0x23
 80005b2:	4386      	bics	r6, r0
 80005b4:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80005b6:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80005b8:	4f05      	ldr	r7, [pc, #20]	; (80005d0 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 80005ba:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80005bc:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80005be:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80005c0:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80005c2:	6819      	ldr	r1, [r3, #0]
 80005c4:	4308      	orrs	r0, r1
 80005c6:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80005c8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80005ca:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80005cc:	7020      	strb	r0, [r4, #0]
  }
}
 80005ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d0:	fffff0ff 	.word	0xfffff0ff

080005d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005d6:	6803      	ldr	r3, [r0, #0]
{
 80005d8:	b085      	sub	sp, #20
 80005da:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005dc:	07db      	lsls	r3, r3, #31
 80005de:	d42f      	bmi.n	8000640 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005e0:	682b      	ldr	r3, [r5, #0]
 80005e2:	079b      	lsls	r3, r3, #30
 80005e4:	d500      	bpl.n	80005e8 <HAL_RCC_OscConfig+0x14>
 80005e6:	e081      	b.n	80006ec <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005e8:	682b      	ldr	r3, [r5, #0]
 80005ea:	071b      	lsls	r3, r3, #28
 80005ec:	d500      	bpl.n	80005f0 <HAL_RCC_OscConfig+0x1c>
 80005ee:	e0bc      	b.n	800076a <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005f0:	682b      	ldr	r3, [r5, #0]
 80005f2:	075b      	lsls	r3, r3, #29
 80005f4:	d500      	bpl.n	80005f8 <HAL_RCC_OscConfig+0x24>
 80005f6:	e0df      	b.n	80007b8 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80005f8:	682b      	ldr	r3, [r5, #0]
 80005fa:	06db      	lsls	r3, r3, #27
 80005fc:	d51a      	bpl.n	8000634 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80005fe:	696a      	ldr	r2, [r5, #20]
 8000600:	4cb5      	ldr	r4, [pc, #724]	; (80008d8 <HAL_RCC_OscConfig+0x304>)
 8000602:	2304      	movs	r3, #4
 8000604:	2a01      	cmp	r2, #1
 8000606:	d000      	beq.n	800060a <HAL_RCC_OscConfig+0x36>
 8000608:	e14b      	b.n	80008a2 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800060a:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800060c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800060e:	430b      	orrs	r3, r1
 8000610:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000612:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000614:	431a      	orrs	r2, r3
 8000616:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000618:	f7ff fe36 	bl	8000288 <HAL_GetTick>
 800061c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800061e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000620:	4233      	tst	r3, r6
 8000622:	d100      	bne.n	8000626 <HAL_RCC_OscConfig+0x52>
 8000624:	e136      	b.n	8000894 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000626:	21f8      	movs	r1, #248	; 0xf8
 8000628:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800062a:	69ab      	ldr	r3, [r5, #24]
 800062c:	438a      	bics	r2, r1
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	4313      	orrs	r3, r2
 8000632:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000634:	6a29      	ldr	r1, [r5, #32]
 8000636:	2900      	cmp	r1, #0
 8000638:	d000      	beq.n	800063c <HAL_RCC_OscConfig+0x68>
 800063a:	e159      	b.n	80008f0 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800063c:	2000      	movs	r0, #0
 800063e:	e013      	b.n	8000668 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000640:	210c      	movs	r1, #12
 8000642:	4ca5      	ldr	r4, [pc, #660]	; (80008d8 <HAL_RCC_OscConfig+0x304>)
 8000644:	6862      	ldr	r2, [r4, #4]
 8000646:	400a      	ands	r2, r1
 8000648:	2a04      	cmp	r2, #4
 800064a:	d006      	beq.n	800065a <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800064c:	6863      	ldr	r3, [r4, #4]
 800064e:	400b      	ands	r3, r1
 8000650:	2b08      	cmp	r3, #8
 8000652:	d10b      	bne.n	800066c <HAL_RCC_OscConfig+0x98>
 8000654:	6863      	ldr	r3, [r4, #4]
 8000656:	03db      	lsls	r3, r3, #15
 8000658:	d508      	bpl.n	800066c <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800065a:	6823      	ldr	r3, [r4, #0]
 800065c:	039b      	lsls	r3, r3, #14
 800065e:	d5bf      	bpl.n	80005e0 <HAL_RCC_OscConfig+0xc>
 8000660:	686b      	ldr	r3, [r5, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1bc      	bne.n	80005e0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000666:	2001      	movs	r0, #1
}
 8000668:	b005      	add	sp, #20
 800066a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800066c:	686b      	ldr	r3, [r5, #4]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d113      	bne.n	800069a <HAL_RCC_OscConfig+0xc6>
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	6822      	ldr	r2, [r4, #0]
 8000676:	025b      	lsls	r3, r3, #9
 8000678:	4313      	orrs	r3, r2
 800067a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800067c:	f7ff fe04 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000680:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000682:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000684:	02b6      	lsls	r6, r6, #10
 8000686:	6823      	ldr	r3, [r4, #0]
 8000688:	4233      	tst	r3, r6
 800068a:	d1a9      	bne.n	80005e0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800068c:	f7ff fdfc 	bl	8000288 <HAL_GetTick>
 8000690:	1bc0      	subs	r0, r0, r7
 8000692:	2864      	cmp	r0, #100	; 0x64
 8000694:	d9f7      	bls.n	8000686 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000696:	2003      	movs	r0, #3
 8000698:	e7e6      	b.n	8000668 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800069a:	2b00      	cmp	r3, #0
 800069c:	d116      	bne.n	80006cc <HAL_RCC_OscConfig+0xf8>
 800069e:	6823      	ldr	r3, [r4, #0]
 80006a0:	4a8e      	ldr	r2, [pc, #568]	; (80008dc <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006a2:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006a4:	4013      	ands	r3, r2
 80006a6:	6023      	str	r3, [r4, #0]
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	4a8d      	ldr	r2, [pc, #564]	; (80008e0 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006ac:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006ae:	4013      	ands	r3, r2
 80006b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006b2:	f7ff fde9 	bl	8000288 <HAL_GetTick>
 80006b6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006b8:	6823      	ldr	r3, [r4, #0]
 80006ba:	4233      	tst	r3, r6
 80006bc:	d100      	bne.n	80006c0 <HAL_RCC_OscConfig+0xec>
 80006be:	e78f      	b.n	80005e0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006c0:	f7ff fde2 	bl	8000288 <HAL_GetTick>
 80006c4:	1bc0      	subs	r0, r0, r7
 80006c6:	2864      	cmp	r0, #100	; 0x64
 80006c8:	d9f6      	bls.n	80006b8 <HAL_RCC_OscConfig+0xe4>
 80006ca:	e7e4      	b.n	8000696 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006cc:	2b05      	cmp	r3, #5
 80006ce:	d105      	bne.n	80006dc <HAL_RCC_OscConfig+0x108>
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	6822      	ldr	r2, [r4, #0]
 80006d4:	02db      	lsls	r3, r3, #11
 80006d6:	4313      	orrs	r3, r2
 80006d8:	6023      	str	r3, [r4, #0]
 80006da:	e7ca      	b.n	8000672 <HAL_RCC_OscConfig+0x9e>
 80006dc:	6823      	ldr	r3, [r4, #0]
 80006de:	4a7f      	ldr	r2, [pc, #508]	; (80008dc <HAL_RCC_OscConfig+0x308>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	6023      	str	r3, [r4, #0]
 80006e4:	6823      	ldr	r3, [r4, #0]
 80006e6:	4a7e      	ldr	r2, [pc, #504]	; (80008e0 <HAL_RCC_OscConfig+0x30c>)
 80006e8:	4013      	ands	r3, r2
 80006ea:	e7c6      	b.n	800067a <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006ec:	220c      	movs	r2, #12
 80006ee:	4c7a      	ldr	r4, [pc, #488]	; (80008d8 <HAL_RCC_OscConfig+0x304>)
 80006f0:	6863      	ldr	r3, [r4, #4]
 80006f2:	4213      	tst	r3, r2
 80006f4:	d006      	beq.n	8000704 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006f6:	6863      	ldr	r3, [r4, #4]
 80006f8:	4013      	ands	r3, r2
 80006fa:	2b08      	cmp	r3, #8
 80006fc:	d110      	bne.n	8000720 <HAL_RCC_OscConfig+0x14c>
 80006fe:	6863      	ldr	r3, [r4, #4]
 8000700:	03db      	lsls	r3, r3, #15
 8000702:	d40d      	bmi.n	8000720 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000704:	6823      	ldr	r3, [r4, #0]
 8000706:	079b      	lsls	r3, r3, #30
 8000708:	d502      	bpl.n	8000710 <HAL_RCC_OscConfig+0x13c>
 800070a:	68eb      	ldr	r3, [r5, #12]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d1aa      	bne.n	8000666 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000710:	21f8      	movs	r1, #248	; 0xf8
 8000712:	6822      	ldr	r2, [r4, #0]
 8000714:	692b      	ldr	r3, [r5, #16]
 8000716:	438a      	bics	r2, r1
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	4313      	orrs	r3, r2
 800071c:	6023      	str	r3, [r4, #0]
 800071e:	e763      	b.n	80005e8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000720:	68ea      	ldr	r2, [r5, #12]
 8000722:	2301      	movs	r3, #1
 8000724:	2a00      	cmp	r2, #0
 8000726:	d00f      	beq.n	8000748 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000728:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800072a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800072c:	4313      	orrs	r3, r2
 800072e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000730:	f7ff fdaa 	bl	8000288 <HAL_GetTick>
 8000734:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000736:	6823      	ldr	r3, [r4, #0]
 8000738:	4233      	tst	r3, r6
 800073a:	d1e9      	bne.n	8000710 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800073c:	f7ff fda4 	bl	8000288 <HAL_GetTick>
 8000740:	1bc0      	subs	r0, r0, r7
 8000742:	2802      	cmp	r0, #2
 8000744:	d9f7      	bls.n	8000736 <HAL_RCC_OscConfig+0x162>
 8000746:	e7a6      	b.n	8000696 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000748:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800074a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 800074c:	439a      	bics	r2, r3
 800074e:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000750:	f7ff fd9a 	bl	8000288 <HAL_GetTick>
 8000754:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000756:	6823      	ldr	r3, [r4, #0]
 8000758:	4233      	tst	r3, r6
 800075a:	d100      	bne.n	800075e <HAL_RCC_OscConfig+0x18a>
 800075c:	e744      	b.n	80005e8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800075e:	f7ff fd93 	bl	8000288 <HAL_GetTick>
 8000762:	1bc0      	subs	r0, r0, r7
 8000764:	2802      	cmp	r0, #2
 8000766:	d9f6      	bls.n	8000756 <HAL_RCC_OscConfig+0x182>
 8000768:	e795      	b.n	8000696 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800076a:	69ea      	ldr	r2, [r5, #28]
 800076c:	2301      	movs	r3, #1
 800076e:	4c5a      	ldr	r4, [pc, #360]	; (80008d8 <HAL_RCC_OscConfig+0x304>)
 8000770:	2a00      	cmp	r2, #0
 8000772:	d010      	beq.n	8000796 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000774:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000776:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000778:	4313      	orrs	r3, r2
 800077a:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800077c:	f7ff fd84 	bl	8000288 <HAL_GetTick>
 8000780:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000784:	4233      	tst	r3, r6
 8000786:	d000      	beq.n	800078a <HAL_RCC_OscConfig+0x1b6>
 8000788:	e732      	b.n	80005f0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800078a:	f7ff fd7d 	bl	8000288 <HAL_GetTick>
 800078e:	1bc0      	subs	r0, r0, r7
 8000790:	2802      	cmp	r0, #2
 8000792:	d9f6      	bls.n	8000782 <HAL_RCC_OscConfig+0x1ae>
 8000794:	e77f      	b.n	8000696 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000796:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000798:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800079a:	439a      	bics	r2, r3
 800079c:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800079e:	f7ff fd73 	bl	8000288 <HAL_GetTick>
 80007a2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007a6:	4233      	tst	r3, r6
 80007a8:	d100      	bne.n	80007ac <HAL_RCC_OscConfig+0x1d8>
 80007aa:	e721      	b.n	80005f0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007ac:	f7ff fd6c 	bl	8000288 <HAL_GetTick>
 80007b0:	1bc0      	subs	r0, r0, r7
 80007b2:	2802      	cmp	r0, #2
 80007b4:	d9f6      	bls.n	80007a4 <HAL_RCC_OscConfig+0x1d0>
 80007b6:	e76e      	b.n	8000696 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007b8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80007ba:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007bc:	4c46      	ldr	r4, [pc, #280]	; (80008d8 <HAL_RCC_OscConfig+0x304>)
 80007be:	0552      	lsls	r2, r2, #21
 80007c0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80007c2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007c4:	4213      	tst	r3, r2
 80007c6:	d108      	bne.n	80007da <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	69e3      	ldr	r3, [r4, #28]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	61e3      	str	r3, [r4, #28]
 80007ce:	69e3      	ldr	r3, [r4, #28]
 80007d0:	4013      	ands	r3, r2
 80007d2:	9303      	str	r3, [sp, #12]
 80007d4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80007d6:	2301      	movs	r3, #1
 80007d8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007da:	2780      	movs	r7, #128	; 0x80
 80007dc:	4e41      	ldr	r6, [pc, #260]	; (80008e4 <HAL_RCC_OscConfig+0x310>)
 80007de:	007f      	lsls	r7, r7, #1
 80007e0:	6833      	ldr	r3, [r6, #0]
 80007e2:	423b      	tst	r3, r7
 80007e4:	d006      	beq.n	80007f4 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007e6:	68ab      	ldr	r3, [r5, #8]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d113      	bne.n	8000814 <HAL_RCC_OscConfig+0x240>
 80007ec:	6a22      	ldr	r2, [r4, #32]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	6223      	str	r3, [r4, #32]
 80007f2:	e030      	b.n	8000856 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007f4:	6833      	ldr	r3, [r6, #0]
 80007f6:	433b      	orrs	r3, r7
 80007f8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80007fa:	f7ff fd45 	bl	8000288 <HAL_GetTick>
 80007fe:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000800:	6833      	ldr	r3, [r6, #0]
 8000802:	423b      	tst	r3, r7
 8000804:	d1ef      	bne.n	80007e6 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000806:	f7ff fd3f 	bl	8000288 <HAL_GetTick>
 800080a:	9b01      	ldr	r3, [sp, #4]
 800080c:	1ac0      	subs	r0, r0, r3
 800080e:	2864      	cmp	r0, #100	; 0x64
 8000810:	d9f6      	bls.n	8000800 <HAL_RCC_OscConfig+0x22c>
 8000812:	e740      	b.n	8000696 <HAL_RCC_OscConfig+0xc2>
 8000814:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000816:	2b00      	cmp	r3, #0
 8000818:	d114      	bne.n	8000844 <HAL_RCC_OscConfig+0x270>
 800081a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800081c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800081e:	4393      	bics	r3, r2
 8000820:	6223      	str	r3, [r4, #32]
 8000822:	6a23      	ldr	r3, [r4, #32]
 8000824:	3203      	adds	r2, #3
 8000826:	4393      	bics	r3, r2
 8000828:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800082a:	f7ff fd2d 	bl	8000288 <HAL_GetTick>
 800082e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000830:	6a23      	ldr	r3, [r4, #32]
 8000832:	423b      	tst	r3, r7
 8000834:	d025      	beq.n	8000882 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000836:	f7ff fd27 	bl	8000288 <HAL_GetTick>
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <HAL_RCC_OscConfig+0x314>)
 800083c:	1b80      	subs	r0, r0, r6
 800083e:	4298      	cmp	r0, r3
 8000840:	d9f6      	bls.n	8000830 <HAL_RCC_OscConfig+0x25c>
 8000842:	e728      	b.n	8000696 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000844:	2b05      	cmp	r3, #5
 8000846:	d10b      	bne.n	8000860 <HAL_RCC_OscConfig+0x28c>
 8000848:	6a21      	ldr	r1, [r4, #32]
 800084a:	3b01      	subs	r3, #1
 800084c:	430b      	orrs	r3, r1
 800084e:	6223      	str	r3, [r4, #32]
 8000850:	6a23      	ldr	r3, [r4, #32]
 8000852:	431a      	orrs	r2, r3
 8000854:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000856:	f7ff fd17 	bl	8000288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800085a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800085c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800085e:	e00d      	b.n	800087c <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000860:	6a23      	ldr	r3, [r4, #32]
 8000862:	4393      	bics	r3, r2
 8000864:	2204      	movs	r2, #4
 8000866:	6223      	str	r3, [r4, #32]
 8000868:	6a23      	ldr	r3, [r4, #32]
 800086a:	4393      	bics	r3, r2
 800086c:	e7c0      	b.n	80007f0 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800086e:	f7ff fd0b 	bl	8000288 <HAL_GetTick>
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <HAL_RCC_OscConfig+0x314>)
 8000874:	1b80      	subs	r0, r0, r6
 8000876:	4298      	cmp	r0, r3
 8000878:	d900      	bls.n	800087c <HAL_RCC_OscConfig+0x2a8>
 800087a:	e70c      	b.n	8000696 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800087c:	6a23      	ldr	r3, [r4, #32]
 800087e:	423b      	tst	r3, r7
 8000880:	d0f5      	beq.n	800086e <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000882:	9b00      	ldr	r3, [sp, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d000      	beq.n	800088a <HAL_RCC_OscConfig+0x2b6>
 8000888:	e6b6      	b.n	80005f8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800088a:	69e3      	ldr	r3, [r4, #28]
 800088c:	4a17      	ldr	r2, [pc, #92]	; (80008ec <HAL_RCC_OscConfig+0x318>)
 800088e:	4013      	ands	r3, r2
 8000890:	61e3      	str	r3, [r4, #28]
 8000892:	e6b1      	b.n	80005f8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000894:	f7ff fcf8 	bl	8000288 <HAL_GetTick>
 8000898:	1bc0      	subs	r0, r0, r7
 800089a:	2802      	cmp	r0, #2
 800089c:	d800      	bhi.n	80008a0 <HAL_RCC_OscConfig+0x2cc>
 800089e:	e6be      	b.n	800061e <HAL_RCC_OscConfig+0x4a>
 80008a0:	e6f9      	b.n	8000696 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80008a2:	3205      	adds	r2, #5
 80008a4:	d103      	bne.n	80008ae <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 80008a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80008a8:	439a      	bics	r2, r3
 80008aa:	6362      	str	r2, [r4, #52]	; 0x34
 80008ac:	e6bb      	b.n	8000626 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80008ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80008b0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80008b2:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80008b4:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80008b6:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80008b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008ba:	4393      	bics	r3, r2
 80008bc:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80008be:	f7ff fce3 	bl	8000288 <HAL_GetTick>
 80008c2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80008c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008c6:	4233      	tst	r3, r6
 80008c8:	d100      	bne.n	80008cc <HAL_RCC_OscConfig+0x2f8>
 80008ca:	e6b3      	b.n	8000634 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80008cc:	f7ff fcdc 	bl	8000288 <HAL_GetTick>
 80008d0:	1bc0      	subs	r0, r0, r7
 80008d2:	2802      	cmp	r0, #2
 80008d4:	d9f6      	bls.n	80008c4 <HAL_RCC_OscConfig+0x2f0>
 80008d6:	e6de      	b.n	8000696 <HAL_RCC_OscConfig+0xc2>
 80008d8:	40021000 	.word	0x40021000
 80008dc:	fffeffff 	.word	0xfffeffff
 80008e0:	fffbffff 	.word	0xfffbffff
 80008e4:	40007000 	.word	0x40007000
 80008e8:	00001388 	.word	0x00001388
 80008ec:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008f0:	220c      	movs	r2, #12
 80008f2:	4c26      	ldr	r4, [pc, #152]	; (800098c <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 80008f4:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008f6:	6863      	ldr	r3, [r4, #4]
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b08      	cmp	r3, #8
 80008fc:	d100      	bne.n	8000900 <HAL_RCC_OscConfig+0x32c>
 80008fe:	e6b3      	b.n	8000668 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000900:	6823      	ldr	r3, [r4, #0]
 8000902:	4a23      	ldr	r2, [pc, #140]	; (8000990 <HAL_RCC_OscConfig+0x3bc>)
 8000904:	4013      	ands	r3, r2
 8000906:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000908:	2902      	cmp	r1, #2
 800090a:	d12f      	bne.n	800096c <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 800090c:	f7ff fcbc 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000910:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000912:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000914:	04b6      	lsls	r6, r6, #18
 8000916:	6823      	ldr	r3, [r4, #0]
 8000918:	4233      	tst	r3, r6
 800091a:	d121      	bne.n	8000960 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800091c:	220f      	movs	r2, #15
 800091e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000920:	4393      	bics	r3, r2
 8000922:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000924:	4313      	orrs	r3, r2
 8000926:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000928:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800092a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800092c:	6862      	ldr	r2, [r4, #4]
 800092e:	430b      	orrs	r3, r1
 8000930:	4918      	ldr	r1, [pc, #96]	; (8000994 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000932:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000934:	400a      	ands	r2, r1
 8000936:	4313      	orrs	r3, r2
 8000938:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	6822      	ldr	r2, [r4, #0]
 800093e:	045b      	lsls	r3, r3, #17
 8000940:	4313      	orrs	r3, r2
 8000942:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000944:	f7ff fca0 	bl	8000288 <HAL_GetTick>
 8000948:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800094a:	04ad      	lsls	r5, r5, #18
 800094c:	6823      	ldr	r3, [r4, #0]
 800094e:	422b      	tst	r3, r5
 8000950:	d000      	beq.n	8000954 <HAL_RCC_OscConfig+0x380>
 8000952:	e673      	b.n	800063c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000954:	f7ff fc98 	bl	8000288 <HAL_GetTick>
 8000958:	1b80      	subs	r0, r0, r6
 800095a:	2802      	cmp	r0, #2
 800095c:	d9f6      	bls.n	800094c <HAL_RCC_OscConfig+0x378>
 800095e:	e69a      	b.n	8000696 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000960:	f7ff fc92 	bl	8000288 <HAL_GetTick>
 8000964:	1bc0      	subs	r0, r0, r7
 8000966:	2802      	cmp	r0, #2
 8000968:	d9d5      	bls.n	8000916 <HAL_RCC_OscConfig+0x342>
 800096a:	e694      	b.n	8000696 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 800096c:	f7ff fc8c 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000970:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000972:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000974:	04ad      	lsls	r5, r5, #18
 8000976:	6823      	ldr	r3, [r4, #0]
 8000978:	422b      	tst	r3, r5
 800097a:	d100      	bne.n	800097e <HAL_RCC_OscConfig+0x3aa>
 800097c:	e65e      	b.n	800063c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800097e:	f7ff fc83 	bl	8000288 <HAL_GetTick>
 8000982:	1b80      	subs	r0, r0, r6
 8000984:	2802      	cmp	r0, #2
 8000986:	d9f6      	bls.n	8000976 <HAL_RCC_OscConfig+0x3a2>
 8000988:	e685      	b.n	8000696 <HAL_RCC_OscConfig+0xc2>
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	40021000 	.word	0x40021000
 8000990:	feffffff 	.word	0xfeffffff
 8000994:	ffc2ffff 	.word	0xffc2ffff

08000998 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000998:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800099a:	4c14      	ldr	r4, [pc, #80]	; (80009ec <HAL_RCC_GetSysClockFreq+0x54>)
{
 800099c:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800099e:	2210      	movs	r2, #16
 80009a0:	0021      	movs	r1, r4
 80009a2:	4668      	mov	r0, sp
 80009a4:	f000 fcea 	bl	800137c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80009a8:	0021      	movs	r1, r4
 80009aa:	ad04      	add	r5, sp, #16
 80009ac:	2210      	movs	r2, #16
 80009ae:	3110      	adds	r1, #16
 80009b0:	0028      	movs	r0, r5
 80009b2:	f000 fce3 	bl	800137c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009b6:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80009b8:	4e0d      	ldr	r6, [pc, #52]	; (80009f0 <HAL_RCC_GetSysClockFreq+0x58>)
 80009ba:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80009bc:	401a      	ands	r2, r3
 80009be:	2a08      	cmp	r2, #8
 80009c0:	d111      	bne.n	80009e6 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80009c2:	200f      	movs	r0, #15
 80009c4:	466a      	mov	r2, sp
 80009c6:	0c99      	lsrs	r1, r3, #18
 80009c8:	4001      	ands	r1, r0
 80009ca:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80009cc:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80009ce:	4002      	ands	r2, r0
 80009d0:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80009d2:	03db      	lsls	r3, r3, #15
 80009d4:	d505      	bpl.n	80009e2 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <HAL_RCC_GetSysClockFreq+0x5c>)
 80009d8:	f7ff fba0 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80009dc:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009de:	b008      	add	sp, #32
 80009e0:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x60>)
 80009e4:	e7fa      	b.n	80009dc <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80009e8:	e7f9      	b.n	80009de <HAL_RCC_GetSysClockFreq+0x46>
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	080013b8 	.word	0x080013b8
 80009f0:	40021000 	.word	0x40021000
 80009f4:	007a1200 	.word	0x007a1200
 80009f8:	003d0900 	.word	0x003d0900

080009fc <HAL_RCC_ClockConfig>:
{
 80009fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009fe:	2201      	movs	r2, #1
 8000a00:	4c43      	ldr	r4, [pc, #268]	; (8000b10 <HAL_RCC_ClockConfig+0x114>)
{
 8000a02:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a04:	6823      	ldr	r3, [r4, #0]
{
 8000a06:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a08:	4013      	ands	r3, r2
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	d31c      	bcc.n	8000a48 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a0e:	6832      	ldr	r2, [r6, #0]
 8000a10:	0793      	lsls	r3, r2, #30
 8000a12:	d423      	bmi.n	8000a5c <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a14:	07d3      	lsls	r3, r2, #31
 8000a16:	d429      	bmi.n	8000a6c <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a18:	2301      	movs	r3, #1
 8000a1a:	6822      	ldr	r2, [r4, #0]
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	4297      	cmp	r7, r2
 8000a20:	d367      	bcc.n	8000af2 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a22:	6833      	ldr	r3, [r6, #0]
 8000a24:	4c3b      	ldr	r4, [pc, #236]	; (8000b14 <HAL_RCC_ClockConfig+0x118>)
 8000a26:	075b      	lsls	r3, r3, #29
 8000a28:	d46a      	bmi.n	8000b00 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a2a:	f7ff ffb5 	bl	8000998 <HAL_RCC_GetSysClockFreq>
 8000a2e:	6863      	ldr	r3, [r4, #4]
 8000a30:	4a39      	ldr	r2, [pc, #228]	; (8000b18 <HAL_RCC_ClockConfig+0x11c>)
 8000a32:	061b      	lsls	r3, r3, #24
 8000a34:	0f1b      	lsrs	r3, r3, #28
 8000a36:	5cd3      	ldrb	r3, [r2, r3]
 8000a38:	40d8      	lsrs	r0, r3
 8000a3a:	4b38      	ldr	r3, [pc, #224]	; (8000b1c <HAL_RCC_ClockConfig+0x120>)
 8000a3c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fbf8 	bl	8000234 <HAL_InitTick>
  return HAL_OK;
 8000a44:	2000      	movs	r0, #0
 8000a46:	e008      	b.n	8000a5a <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a48:	6823      	ldr	r3, [r4, #0]
 8000a4a:	4393      	bics	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	4013      	ands	r3, r2
 8000a54:	4299      	cmp	r1, r3
 8000a56:	d0da      	beq.n	8000a0e <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000a58:	2001      	movs	r0, #1
}
 8000a5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a5c:	20f0      	movs	r0, #240	; 0xf0
 8000a5e:	492d      	ldr	r1, [pc, #180]	; (8000b14 <HAL_RCC_ClockConfig+0x118>)
 8000a60:	684b      	ldr	r3, [r1, #4]
 8000a62:	4383      	bics	r3, r0
 8000a64:	68b0      	ldr	r0, [r6, #8]
 8000a66:	4303      	orrs	r3, r0
 8000a68:	604b      	str	r3, [r1, #4]
 8000a6a:	e7d3      	b.n	8000a14 <HAL_RCC_ClockConfig+0x18>
 8000a6c:	4d29      	ldr	r5, [pc, #164]	; (8000b14 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a6e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a70:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d11a      	bne.n	8000aac <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a76:	039b      	lsls	r3, r3, #14
 8000a78:	d5ee      	bpl.n	8000a58 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	686b      	ldr	r3, [r5, #4]
 8000a7e:	438b      	bics	r3, r1
 8000a80:	4313      	orrs	r3, r2
 8000a82:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000a84:	f7ff fc00 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a88:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000a8a:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d115      	bne.n	8000abc <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a90:	220c      	movs	r2, #12
 8000a92:	686b      	ldr	r3, [r5, #4]
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	d0be      	beq.n	8000a18 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a9a:	f7ff fbf5 	bl	8000288 <HAL_GetTick>
 8000a9e:	9b01      	ldr	r3, [sp, #4]
 8000aa0:	1ac0      	subs	r0, r0, r3
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <HAL_RCC_ClockConfig+0x124>)
 8000aa4:	4298      	cmp	r0, r3
 8000aa6:	d9f3      	bls.n	8000a90 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	e7d6      	b.n	8000a5a <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000aac:	2a02      	cmp	r2, #2
 8000aae:	d102      	bne.n	8000ab6 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ab0:	019b      	lsls	r3, r3, #6
 8000ab2:	d4e2      	bmi.n	8000a7a <HAL_RCC_ClockConfig+0x7e>
 8000ab4:	e7d0      	b.n	8000a58 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ab6:	079b      	lsls	r3, r3, #30
 8000ab8:	d4df      	bmi.n	8000a7a <HAL_RCC_ClockConfig+0x7e>
 8000aba:	e7cd      	b.n	8000a58 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d012      	beq.n	8000ae6 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ac0:	220c      	movs	r2, #12
 8000ac2:	686b      	ldr	r3, [r5, #4]
 8000ac4:	4213      	tst	r3, r2
 8000ac6:	d0a7      	beq.n	8000a18 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ac8:	f7ff fbde 	bl	8000288 <HAL_GetTick>
 8000acc:	9b01      	ldr	r3, [sp, #4]
 8000ace:	1ac0      	subs	r0, r0, r3
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <HAL_RCC_ClockConfig+0x124>)
 8000ad2:	4298      	cmp	r0, r3
 8000ad4:	d9f4      	bls.n	8000ac0 <HAL_RCC_ClockConfig+0xc4>
 8000ad6:	e7e7      	b.n	8000aa8 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ad8:	f7ff fbd6 	bl	8000288 <HAL_GetTick>
 8000adc:	9b01      	ldr	r3, [sp, #4]
 8000ade:	1ac0      	subs	r0, r0, r3
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_RCC_ClockConfig+0x124>)
 8000ae2:	4298      	cmp	r0, r3
 8000ae4:	d8e0      	bhi.n	8000aa8 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	686b      	ldr	r3, [r5, #4]
 8000aea:	4013      	ands	r3, r2
 8000aec:	2b08      	cmp	r3, #8
 8000aee:	d1f3      	bne.n	8000ad8 <HAL_RCC_ClockConfig+0xdc>
 8000af0:	e792      	b.n	8000a18 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000af2:	6822      	ldr	r2, [r4, #0]
 8000af4:	439a      	bics	r2, r3
 8000af6:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000af8:	6822      	ldr	r2, [r4, #0]
 8000afa:	421a      	tst	r2, r3
 8000afc:	d1ac      	bne.n	8000a58 <HAL_RCC_ClockConfig+0x5c>
 8000afe:	e790      	b.n	8000a22 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000b00:	6863      	ldr	r3, [r4, #4]
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_RCC_ClockConfig+0x128>)
 8000b04:	4013      	ands	r3, r2
 8000b06:	68f2      	ldr	r2, [r6, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	6063      	str	r3, [r4, #4]
 8000b0c:	e78d      	b.n	8000a2a <HAL_RCC_ClockConfig+0x2e>
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	40022000 	.word	0x40022000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	080013dc 	.word	0x080013dc
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	00001388 	.word	0x00001388
 8000b24:	fffff8ff 	.word	0xfffff8ff

08000b28 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000b28:	4b01      	ldr	r3, [pc, #4]	; (8000b30 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b2a:	6818      	ldr	r0, [r3, #0]
}
 8000b2c:	4770      	bx	lr
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	20000000 	.word	0x20000000

08000b34 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	055b      	lsls	r3, r3, #21
 8000b3c:	0f5b      	lsrs	r3, r3, #29
 8000b3e:	5cd3      	ldrb	r3, [r2, r3]
 8000b40:	4a03      	ldr	r2, [pc, #12]	; (8000b50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000b42:	6810      	ldr	r0, [r2, #0]
 8000b44:	40d8      	lsrs	r0, r3
}    
 8000b46:	4770      	bx	lr
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	080013ec 	.word	0x080013ec
 8000b50:	20000000 	.word	0x20000000

08000b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000b54:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000b56:	6803      	ldr	r3, [r0, #0]
{
 8000b58:	b085      	sub	sp, #20
 8000b5a:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000b5c:	03db      	lsls	r3, r3, #15
 8000b5e:	d528      	bpl.n	8000bb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b60:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000b62:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b64:	4c37      	ldr	r4, [pc, #220]	; (8000c44 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000b66:	0552      	lsls	r2, r2, #21
 8000b68:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000b6a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b6c:	4213      	tst	r3, r2
 8000b6e:	d108      	bne.n	8000b82 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	69e3      	ldr	r3, [r4, #28]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	61e3      	str	r3, [r4, #28]
 8000b76:	69e3      	ldr	r3, [r4, #28]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	9303      	str	r3, [sp, #12]
 8000b7c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b82:	2780      	movs	r7, #128	; 0x80
 8000b84:	4e30      	ldr	r6, [pc, #192]	; (8000c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000b86:	007f      	lsls	r7, r7, #1
 8000b88:	6833      	ldr	r3, [r6, #0]
 8000b8a:	423b      	tst	r3, r7
 8000b8c:	d026      	beq.n	8000bdc <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000b8e:	22c0      	movs	r2, #192	; 0xc0
 8000b90:	6a23      	ldr	r3, [r4, #32]
 8000b92:	0092      	lsls	r2, r2, #2
 8000b94:	4013      	ands	r3, r2
 8000b96:	4e2d      	ldr	r6, [pc, #180]	; (8000c4c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000b98:	d132      	bne.n	8000c00 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000b9a:	6a23      	ldr	r3, [r4, #32]
 8000b9c:	401e      	ands	r6, r3
 8000b9e:	686b      	ldr	r3, [r5, #4]
 8000ba0:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ba2:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ba4:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d103      	bne.n	8000bb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000baa:	69e3      	ldr	r3, [r4, #28]
 8000bac:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000bb2:	682a      	ldr	r2, [r5, #0]
 8000bb4:	07d3      	lsls	r3, r2, #31
 8000bb6:	d506      	bpl.n	8000bc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	4922      	ldr	r1, [pc, #136]	; (8000c44 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000bbc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000bbe:	4383      	bics	r3, r0
 8000bc0:	68a8      	ldr	r0, [r5, #8]
 8000bc2:	4303      	orrs	r3, r0
 8000bc4:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000bc6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000bc8:	0693      	lsls	r3, r2, #26
 8000bca:	d517      	bpl.n	8000bfc <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000bcc:	2110      	movs	r1, #16
 8000bce:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000bd0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000bd2:	438b      	bics	r3, r1
 8000bd4:	68e9      	ldr	r1, [r5, #12]
 8000bd6:	430b      	orrs	r3, r1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	e00f      	b.n	8000bfc <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bdc:	6833      	ldr	r3, [r6, #0]
 8000bde:	433b      	orrs	r3, r7
 8000be0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000be2:	f7ff fb51 	bl	8000288 <HAL_GetTick>
 8000be6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000be8:	6833      	ldr	r3, [r6, #0]
 8000bea:	423b      	tst	r3, r7
 8000bec:	d1cf      	bne.n	8000b8e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bee:	f7ff fb4b 	bl	8000288 <HAL_GetTick>
 8000bf2:	9b01      	ldr	r3, [sp, #4]
 8000bf4:	1ac0      	subs	r0, r0, r3
 8000bf6:	2864      	cmp	r0, #100	; 0x64
 8000bf8:	d9f6      	bls.n	8000be8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8000bfa:	2003      	movs	r0, #3
}
 8000bfc:	b005      	add	sp, #20
 8000bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c00:	6869      	ldr	r1, [r5, #4]
 8000c02:	400a      	ands	r2, r1
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d0c8      	beq.n	8000b9a <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c08:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c0a:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c0c:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c0e:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c10:	025b      	lsls	r3, r3, #9
 8000c12:	4303      	orrs	r3, r0
 8000c14:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c16:	6a23      	ldr	r3, [r4, #32]
 8000c18:	480e      	ldr	r0, [pc, #56]	; (8000c54 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c1a:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c1c:	4003      	ands	r3, r0
 8000c1e:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000c20:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000c22:	07d3      	lsls	r3, r2, #31
 8000c24:	d5b9      	bpl.n	8000b9a <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000c26:	f7ff fb2f 	bl	8000288 <HAL_GetTick>
 8000c2a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	6a23      	ldr	r3, [r4, #32]
 8000c30:	4213      	tst	r3, r2
 8000c32:	d1b2      	bne.n	8000b9a <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c34:	f7ff fb28 	bl	8000288 <HAL_GetTick>
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c3a:	1bc0      	subs	r0, r0, r7
 8000c3c:	4298      	cmp	r0, r3
 8000c3e:	d9f5      	bls.n	8000c2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8000c40:	e7db      	b.n	8000bfa <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40007000 	.word	0x40007000
 8000c4c:	fffffcff 	.word	0xfffffcff
 8000c50:	efffffff 	.word	0xefffffff
 8000c54:	fffeffff 	.word	0xfffeffff
 8000c58:	00001388 	.word	0x00001388

08000c5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5e:	0004      	movs	r4, r0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8000c60:	2001      	movs	r0, #1
  if (hspi == NULL)
 8000c62:	2c00      	cmp	r4, #0
 8000c64:	d04b      	beq.n	8000cfe <HAL_SPI_Init+0xa2>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c66:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000c68:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c6a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000c6c:	355d      	adds	r5, #93	; 0x5d
 8000c6e:	782b      	ldrb	r3, [r5, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d105      	bne.n	8000c82 <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000c76:	0022      	movs	r2, r4
 8000c78:	325c      	adds	r2, #92	; 0x5c
 8000c7a:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000c7c:	0020      	movs	r0, r4
 8000c7e:	f000 fa95 	bl	80011ac <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000c82:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000c84:	2240      	movs	r2, #64	; 0x40
 8000c86:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000c88:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8000c8a:	680b      	ldr	r3, [r1, #0]
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	4393      	bics	r3, r2
 8000c90:	600b      	str	r3, [r1, #0]
 8000c92:	23e0      	movs	r3, #224	; 0xe0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000c94:	68e2      	ldr	r2, [r4, #12]
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d931      	bls.n	8000d00 <HAL_SPI_Init+0xa4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000c9c:	26f0      	movs	r6, #240	; 0xf0
 8000c9e:	0136      	lsls	r6, r6, #4
 8000ca0:	42b2      	cmp	r2, r6
 8000ca2:	d133      	bne.n	8000d0c <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000ca4:	0006      	movs	r6, r0
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000ca6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	d103      	bne.n	8000cb4 <HAL_SPI_Init+0x58>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d92f      	bls.n	8000d10 <HAL_SPI_Init+0xb4>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000cb0:	2302      	movs	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000cb2:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000cb4:	68a7      	ldr	r7, [r4, #8]
 8000cb6:	6863      	ldr	r3, [r4, #4]
 8000cb8:	69a0      	ldr	r0, [r4, #24]
 8000cba:	433b      	orrs	r3, r7
 8000cbc:	6927      	ldr	r7, [r4, #16]
 8000cbe:	433b      	orrs	r3, r7
 8000cc0:	6967      	ldr	r7, [r4, #20]
 8000cc2:	433b      	orrs	r3, r7
 8000cc4:	69e7      	ldr	r7, [r4, #28]
 8000cc6:	433b      	orrs	r3, r7
 8000cc8:	6a27      	ldr	r7, [r4, #32]
 8000cca:	433b      	orrs	r3, r7
 8000ccc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8000cce:	433b      	orrs	r3, r7
 8000cd0:	2780      	movs	r7, #128	; 0x80
 8000cd2:	00bf      	lsls	r7, r7, #2
 8000cd4:	4007      	ands	r7, r0
 8000cd6:	433b      	orrs	r3, r7
 8000cd8:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cdc:	0c00      	lsrs	r0, r0, #16
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	4018      	ands	r0, r3
 8000ce8:	4310      	orrs	r0, r2
 8000cea:	4306      	orrs	r6, r0
 8000cec:	604e      	str	r6, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000cee:	69cb      	ldr	r3, [r1, #28]
 8000cf0:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_SPI_Init+0xb8>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000cf2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000cf8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000cfa:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000cfc:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 8000cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000d00:	2680      	movs	r6, #128	; 0x80
 8000d02:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d0ce      	beq.n	8000ca6 <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d08:	62a0      	str	r0, [r4, #40]	; 0x28
 8000d0a:	e7cc      	b.n	8000ca6 <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000d0c:	0006      	movs	r6, r0
 8000d0e:	e7fb      	b.n	8000d08 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e7ce      	b.n	8000cb2 <HAL_SPI_Init+0x56>
 8000d14:	fffff7ff 	.word	0xfffff7ff

08000d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d18:	b570      	push	{r4, r5, r6, lr}
 8000d1a:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d1c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d1e:	69c2      	ldr	r2, [r0, #28]
 8000d20:	6883      	ldr	r3, [r0, #8]
 8000d22:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d24:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d26:	4303      	orrs	r3, r0
 8000d28:	6960      	ldr	r0, [r4, #20]
 8000d2a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d2c:	4835      	ldr	r0, [pc, #212]	; (8000e04 <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d2e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d30:	4001      	ands	r1, r0
 8000d32:	430b      	orrs	r3, r1
 8000d34:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d36:	686b      	ldr	r3, [r5, #4]
 8000d38:	4933      	ldr	r1, [pc, #204]	; (8000e08 <UART_SetConfig+0xf0>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d3a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d3c:	400b      	ands	r3, r1
 8000d3e:	68e1      	ldr	r1, [r4, #12]
 8000d40:	430b      	orrs	r3, r1
 8000d42:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d44:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d46:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d48:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d4a:	4830      	ldr	r0, [pc, #192]	; (8000e0c <UART_SetConfig+0xf4>)
 8000d4c:	4001      	ands	r1, r0
 8000d4e:	430b      	orrs	r3, r1

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d50:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d52:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <UART_SetConfig+0xf8>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	400b      	ands	r3, r1
 8000d5a:	492e      	ldr	r1, [pc, #184]	; (8000e14 <UART_SetConfig+0xfc>)
 8000d5c:	5cc8      	ldrb	r0, [r1, r3]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d12c      	bne.n	8000dc0 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8000d66:	2808      	cmp	r0, #8
 8000d68:	d827      	bhi.n	8000dba <UART_SetConfig+0xa2>
 8000d6a:	f7ff f9cd 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000d6e:	2605      	.short	0x2605
 8000d70:	261e260b 	.word	0x261e260b
 8000d74:	2626      	.short	0x2626
 8000d76:	21          	.byte	0x21
 8000d77:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000d78:	f7ff fedc 	bl	8000b34 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000d7c:	6863      	ldr	r3, [r4, #4]
 8000d7e:	0040      	lsls	r0, r0, #1
 8000d80:	085b      	lsrs	r3, r3, #1
 8000d82:	e002      	b.n	8000d8a <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000d84:	6863      	ldr	r3, [r4, #4]
 8000d86:	0858      	lsrs	r0, r3, #1
 8000d88:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <UART_SetConfig+0x100>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000d8a:	18c0      	adds	r0, r0, r3
 8000d8c:	6861      	ldr	r1, [r4, #4]
 8000d8e:	f7ff f9c5 	bl	800011c <__udivsi3>
 8000d92:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8000d94:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8000d96:	220f      	movs	r2, #15
 8000d98:	0019      	movs	r1, r3
 8000d9a:	4391      	bics	r1, r2
 8000d9c:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000d9e:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8000da0:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000da2:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8000da4:	4313      	orrs	r3, r2
 8000da6:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8000da8:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000daa:	f7ff fdf5 	bl	8000998 <HAL_RCC_GetSysClockFreq>
 8000dae:	e7e5      	b.n	8000d7c <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000db0:	6863      	ldr	r3, [r4, #4]
 8000db2:	0858      	lsrs	r0, r3, #1
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	025b      	lsls	r3, r3, #9
 8000db8:	e7e7      	b.n	8000d8a <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 8000dba:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e7ea      	b.n	8000d96 <UART_SetConfig+0x7e>
    switch (clocksource)
 8000dc0:	2808      	cmp	r0, #8
 8000dc2:	d81d      	bhi.n	8000e00 <UART_SetConfig+0xe8>
 8000dc4:	f7ff f9a0 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000dc8:	1c0a1c05 	.word	0x1c0a1c05
 8000dcc:	1c1c1c14 	.word	0x1c1c1c14
 8000dd0:	17          	.byte	0x17
 8000dd1:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000dd2:	f7ff feaf 	bl	8000b34 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000dd6:	6861      	ldr	r1, [r4, #4]
 8000dd8:	084b      	lsrs	r3, r1, #1
 8000dda:	e002      	b.n	8000de2 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000ddc:	6861      	ldr	r1, [r4, #4]
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <UART_SetConfig+0x104>)
 8000de0:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000de2:	18c0      	adds	r0, r0, r3
 8000de4:	f7ff f99a 	bl	800011c <__udivsi3>
 8000de8:	b280      	uxth	r0, r0
 8000dea:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000dec:	2000      	movs	r0, #0
        break;
 8000dee:	e7db      	b.n	8000da8 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000df0:	f7ff fdd2 	bl	8000998 <HAL_RCC_GetSysClockFreq>
 8000df4:	e7ef      	b.n	8000dd6 <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	6861      	ldr	r1, [r4, #4]
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	0848      	lsrs	r0, r1, #1
 8000dfe:	e7f0      	b.n	8000de2 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8000e00:	2001      	movs	r0, #1
 8000e02:	e7d1      	b.n	8000da8 <UART_SetConfig+0x90>
 8000e04:	ffff69f3 	.word	0xffff69f3
 8000e08:	ffffcfff 	.word	0xffffcfff
 8000e0c:	fffff4ff 	.word	0xfffff4ff
 8000e10:	40021000 	.word	0x40021000
 8000e14:	080013d8 	.word	0x080013d8
 8000e18:	00f42400 	.word	0x00f42400
 8000e1c:	007a1200 	.word	0x007a1200

08000e20 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000e20:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000e22:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000e24:	07da      	lsls	r2, r3, #31
 8000e26:	d506      	bpl.n	8000e36 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8000e28:	6801      	ldr	r1, [r0, #0]
 8000e2a:	4c28      	ldr	r4, [pc, #160]	; (8000ecc <UART_AdvFeatureConfig+0xac>)
 8000e2c:	684a      	ldr	r2, [r1, #4]
 8000e2e:	4022      	ands	r2, r4
 8000e30:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8000e32:	4322      	orrs	r2, r4
 8000e34:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8000e36:	079a      	lsls	r2, r3, #30
 8000e38:	d506      	bpl.n	8000e48 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8000e3a:	6801      	ldr	r1, [r0, #0]
 8000e3c:	4c24      	ldr	r4, [pc, #144]	; (8000ed0 <UART_AdvFeatureConfig+0xb0>)
 8000e3e:	684a      	ldr	r2, [r1, #4]
 8000e40:	4022      	ands	r2, r4
 8000e42:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000e44:	4322      	orrs	r2, r4
 8000e46:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8000e48:	075a      	lsls	r2, r3, #29
 8000e4a:	d506      	bpl.n	8000e5a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8000e4c:	6801      	ldr	r1, [r0, #0]
 8000e4e:	4c21      	ldr	r4, [pc, #132]	; (8000ed4 <UART_AdvFeatureConfig+0xb4>)
 8000e50:	684a      	ldr	r2, [r1, #4]
 8000e52:	4022      	ands	r2, r4
 8000e54:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000e56:	4322      	orrs	r2, r4
 8000e58:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8000e5a:	071a      	lsls	r2, r3, #28
 8000e5c:	d506      	bpl.n	8000e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8000e5e:	6801      	ldr	r1, [r0, #0]
 8000e60:	4c1d      	ldr	r4, [pc, #116]	; (8000ed8 <UART_AdvFeatureConfig+0xb8>)
 8000e62:	684a      	ldr	r2, [r1, #4]
 8000e64:	4022      	ands	r2, r4
 8000e66:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000e68:	4322      	orrs	r2, r4
 8000e6a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8000e6c:	06da      	lsls	r2, r3, #27
 8000e6e:	d506      	bpl.n	8000e7e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8000e70:	6801      	ldr	r1, [r0, #0]
 8000e72:	4c1a      	ldr	r4, [pc, #104]	; (8000edc <UART_AdvFeatureConfig+0xbc>)
 8000e74:	688a      	ldr	r2, [r1, #8]
 8000e76:	4022      	ands	r2, r4
 8000e78:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000e7a:	4322      	orrs	r2, r4
 8000e7c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8000e7e:	069a      	lsls	r2, r3, #26
 8000e80:	d506      	bpl.n	8000e90 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8000e82:	6801      	ldr	r1, [r0, #0]
 8000e84:	4c16      	ldr	r4, [pc, #88]	; (8000ee0 <UART_AdvFeatureConfig+0xc0>)
 8000e86:	688a      	ldr	r2, [r1, #8]
 8000e88:	4022      	ands	r2, r4
 8000e8a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000e8c:	4322      	orrs	r2, r4
 8000e8e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8000e90:	065a      	lsls	r2, r3, #25
 8000e92:	d510      	bpl.n	8000eb6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8000e94:	6801      	ldr	r1, [r0, #0]
 8000e96:	4d13      	ldr	r5, [pc, #76]	; (8000ee4 <UART_AdvFeatureConfig+0xc4>)
 8000e98:	684a      	ldr	r2, [r1, #4]
 8000e9a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000e9c:	402a      	ands	r2, r5
 8000e9e:	4322      	orrs	r2, r4
 8000ea0:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	0352      	lsls	r2, r2, #13
 8000ea6:	4294      	cmp	r4, r2
 8000ea8:	d105      	bne.n	8000eb6 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8000eaa:	684a      	ldr	r2, [r1, #4]
 8000eac:	4c0e      	ldr	r4, [pc, #56]	; (8000ee8 <UART_AdvFeatureConfig+0xc8>)
 8000eae:	4022      	ands	r2, r4
 8000eb0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000eb2:	4322      	orrs	r2, r4
 8000eb4:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8000eb6:	061b      	lsls	r3, r3, #24
 8000eb8:	d506      	bpl.n	8000ec8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8000eba:	6802      	ldr	r2, [r0, #0]
 8000ebc:	490b      	ldr	r1, [pc, #44]	; (8000eec <UART_AdvFeatureConfig+0xcc>)
 8000ebe:	6853      	ldr	r3, [r2, #4]
 8000ec0:	400b      	ands	r3, r1
 8000ec2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000ec4:	430b      	orrs	r3, r1
 8000ec6:	6053      	str	r3, [r2, #4]
  }
}
 8000ec8:	bd30      	pop	{r4, r5, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	fffdffff 	.word	0xfffdffff
 8000ed0:	fffeffff 	.word	0xfffeffff
 8000ed4:	fffbffff 	.word	0xfffbffff
 8000ed8:	ffff7fff 	.word	0xffff7fff
 8000edc:	ffffefff 	.word	0xffffefff
 8000ee0:	ffffdfff 	.word	0xffffdfff
 8000ee4:	ffefffff 	.word	0xffefffff
 8000ee8:	ff9fffff 	.word	0xff9fffff
 8000eec:	fff7ffff 	.word	0xfff7ffff

08000ef0 <HAL_UART_Init>:
{
 8000ef0:	b570      	push	{r4, r5, r6, lr}
 8000ef2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8000ef4:	d101      	bne.n	8000efa <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8000ef6:	2001      	movs	r0, #1
}
 8000ef8:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8000efa:	0005      	movs	r5, r0
 8000efc:	3569      	adds	r5, #105	; 0x69
 8000efe:	782b      	ldrb	r3, [r5, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d104      	bne.n	8000f10 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8000f06:	0002      	movs	r2, r0
 8000f08:	3268      	adds	r2, #104	; 0x68
 8000f0a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8000f0c:	f000 f97e 	bl	800120c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000f10:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000f12:	2101      	movs	r1, #1
 8000f14:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f16:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8000f18:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000f1a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8000f1c:	438b      	bics	r3, r1
 8000f1e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000f20:	f7ff fefa 	bl	8000d18 <UART_SetConfig>
 8000f24:	2801      	cmp	r0, #1
 8000f26:	d0e6      	beq.n	8000ef6 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8000f2e:	0020      	movs	r0, r4
 8000f30:	f7ff ff76 	bl	8000e20 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	490b      	ldr	r1, [pc, #44]	; (8000f64 <HAL_UART_Init+0x74>)
 8000f38:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f3a:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000f3c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8000f3e:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000f40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	438a      	bics	r2, r1
 8000f46:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	6819      	ldr	r1, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8000f50:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8000f52:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f54:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8000f56:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8000f58:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8000f5a:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8000f5c:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8000f5e:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8000f60:	e7ca      	b.n	8000ef8 <HAL_UART_Init+0x8>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	fffff7ff 	.word	0xfffff7ff

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6a:	2410      	movs	r4, #16
{
 8000f6c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	2230      	movs	r2, #48	; 0x30
 8000f70:	2100      	movs	r1, #0
 8000f72:	a808      	add	r0, sp, #32
 8000f74:	f000 fa0b 	bl	800138e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	0022      	movs	r2, r4
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4668      	mov	r0, sp
 8000f7e:	f000 fa06 	bl	800138e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f82:	0022      	movs	r2, r4
 8000f84:	2100      	movs	r1, #0
 8000f86:	a804      	add	r0, sp, #16
 8000f88:	f000 fa01 	bl	800138e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	025b      	lsls	r3, r3, #9
 8000f94:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f96:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f98:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9a:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f9c:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	3c0e      	subs	r4, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa2:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000fa4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa6:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa8:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000faa:	f7ff fb13 	bl	80005d4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fae:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb0:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fb4:	0029      	movs	r1, r5
 8000fb6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb8:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fba:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fbc:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fbe:	f7ff fd1d 	bl	80009fc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000fc2:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc4:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000fc6:	9304      	str	r3, [sp, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000fc8:	9406      	str	r4, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000fca:	9407      	str	r4, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fcc:	f7ff fdc2 	bl	8000b54 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000fd0:	b015      	add	sp, #84	; 0x54
 8000fd2:	bd30      	pop	{r4, r5, pc}

08000fd4 <main>:
{
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd6:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000fd8:	f7ff f93e 	bl	8000258 <HAL_Init>
  SystemClock_Config();
 8000fdc:	f7ff ffc4 	bl	8000f68 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	2214      	movs	r2, #20
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	a803      	add	r0, sp, #12
 8000fe6:	f000 f9d2 	bl	800138e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fea:	2080      	movs	r0, #128	; 0x80
 8000fec:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <main+0x118>)
 8000fee:	03c0      	lsls	r0, r0, #15
 8000ff0:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(SPI1_CS0_GPIO_Port, SPI1_CS0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff4:	4301      	orrs	r1, r0
 8000ff6:	6159      	str	r1, [r3, #20]
 8000ff8:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8000ffa:	2610      	movs	r6, #16
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffc:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001000:	9200      	str	r2, [sp, #0]
 8001002:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	6959      	ldr	r1, [r3, #20]
 8001006:	0280      	lsls	r0, r0, #10
 8001008:	4301      	orrs	r1, r0
 800100a:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001010:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001014:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	9201      	str	r2, [sp, #4]
 8001018:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 800101c:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	430a      	orrs	r2, r1
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	400b      	ands	r3, r1
 8001028:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 800102a:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 800102e:	f7ff fa2b 	bl	8000488 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS0_GPIO_Port, SPI1_CS0_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	2102      	movs	r1, #2
 8001036:	482e      	ldr	r0, [pc, #184]	; (80010f0 <main+0x11c>)
 8001038:	f7ff fa26 	bl	8000488 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 800103c:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800103e:	2311      	movs	r3, #17
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001040:	a903      	add	r1, sp, #12
 8001042:	05c0      	lsls	r0, r0, #23

  /*Configure GPIO pin : SPI1_CS0_Pin */
  GPIO_InitStruct.Pin = SPI1_CS0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001046:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8001048:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 800104e:	f7ff f96b 	bl	8000328 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI1_CS0_Pin;
 8001052:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI1_CS0_GPIO_Port, &GPIO_InitStruct);
 8001054:	a903      	add	r1, sp, #12
 8001056:	4826      	ldr	r0, [pc, #152]	; (80010f0 <main+0x11c>)
  GPIO_InitStruct.Pin = SPI1_CS0_Pin;
 8001058:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(SPI1_CS0_GPIO_Port, &GPIO_InitStruct);
 8001060:	f7ff f962 	bl	8000328 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001064:	4d23      	ldr	r5, [pc, #140]	; (80010f4 <main+0x120>)
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <main+0x124>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001068:	0028      	movs	r0, r5
  hi2c1.Instance = I2C1;
 800106a:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800106c:	4b23      	ldr	r3, [pc, #140]	; (80010fc <main+0x128>)
  hi2c1.Init.OwnAddress1 = 0;
 800106e:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x2000090E;
 8001070:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001072:	60ef      	str	r7, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001074:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001076:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001078:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800107a:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800107c:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800107e:	f7ff fa09 	bl	8000494 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001082:	0021      	movs	r1, r4
 8001084:	0028      	movs	r0, r5
 8001086:	f7ff fa5b 	bl	8000540 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800108a:	0021      	movs	r1, r4
 800108c:	0028      	movs	r0, r5
 800108e:	f7ff fa7d 	bl	800058c <HAL_I2CEx_ConfigDigitalFilter>
  hspi1.Instance = SPI1;
 8001092:	481b      	ldr	r0, [pc, #108]	; (8001100 <main+0x12c>)
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <main+0x130>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001096:	6084      	str	r4, [r0, #8]
  hspi1.Instance = SPI1;
 8001098:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800109a:	2382      	movs	r3, #130	; 0x82
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80010a0:	33fd      	adds	r3, #253	; 0xfd
 80010a2:	33ff      	adds	r3, #255	; 0xff
 80010a4:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010a6:	3b01      	subs	r3, #1
 80010a8:	3bff      	subs	r3, #255	; 0xff
 80010aa:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 80010ac:	3bfa      	subs	r3, #250	; 0xfa
 80010ae:	3bff      	subs	r3, #255	; 0xff
 80010b0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010b2:	19db      	adds	r3, r3, r7
 80010b4:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b6:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b8:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010ba:	61c6      	str	r6, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010bc:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010be:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c0:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010c2:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010c4:	f7ff fdca 	bl	8000c5c <HAL_SPI_Init>
  huart1.Instance = USART1;
 80010c8:	480f      	ldr	r0, [pc, #60]	; (8001108 <main+0x134>)
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <main+0x138>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010cc:	6084      	str	r4, [r0, #8]
  huart1.Instance = USART1;
 80010ce:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80010d0:	23e1      	movs	r3, #225	; 0xe1
 80010d2:	025b      	lsls	r3, r3, #9
 80010d4:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d6:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d8:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010da:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010dc:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010de:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e4:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e6:	f7ff ff03 	bl	8000ef0 <HAL_UART_Init>
 80010ea:	e7fe      	b.n	80010ea <main+0x116>
 80010ec:	40021000 	.word	0x40021000
 80010f0:	48000400 	.word	0x48000400
 80010f4:	20000024 	.word	0x20000024
 80010f8:	40005400 	.word	0x40005400
 80010fc:	2000090e 	.word	0x2000090e
 8001100:	200000e0 	.word	0x200000e0
 8001104:	40013000 	.word	0x40013000
 8001108:	20000070 	.word	0x20000070
 800110c:	40013800 	.word	0x40013800

08001110 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001110:	2001      	movs	r0, #1
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_MspInit+0x2c>)
{
 8001114:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	6999      	ldr	r1, [r3, #24]
 8001118:	4301      	orrs	r1, r0
 800111a:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	4002      	ands	r2, r0
 8001124:	9200      	str	r2, [sp, #0]
 8001126:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	69da      	ldr	r2, [r3, #28]
 800112a:	430a      	orrs	r2, r1
 800112c:	61da      	str	r2, [r3, #28]
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	400b      	ands	r3, r1
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	b002      	add	sp, #8
 8001138:	4770      	bx	lr
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001140:	b510      	push	{r4, lr}
 8001142:	0004      	movs	r4, r0
 8001144:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	2214      	movs	r2, #20
 8001148:	2100      	movs	r1, #0
 800114a:	a803      	add	r0, sp, #12
 800114c:	f000 f91f 	bl	800138e <memset>
  if(hi2c->Instance==I2C1)
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <HAL_I2C_MspInit+0x64>)
 8001152:	6822      	ldr	r2, [r4, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d122      	bne.n	800119e <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	4c13      	ldr	r4, [pc, #76]	; (80011a8 <HAL_I2C_MspInit+0x68>)
 800115c:	0289      	lsls	r1, r1, #10
 800115e:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	430a      	orrs	r2, r1
 8001164:	6162      	str	r2, [r4, #20]
 8001166:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	400b      	ands	r3, r1
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001170:	23c0      	movs	r3, #192	; 0xc0
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001176:	2312      	movs	r3, #18
 8001178:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117a:	3b11      	subs	r3, #17
 800117c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117e:	3302      	adds	r3, #2
 8001180:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001184:	3301      	adds	r3, #1
 8001186:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f7ff f8ce 	bl	8000328 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	69e2      	ldr	r2, [r4, #28]
 8001190:	0389      	lsls	r1, r1, #14
 8001192:	430a      	orrs	r2, r1
 8001194:	61e2      	str	r2, [r4, #28]
 8001196:	69e3      	ldr	r3, [r4, #28]
 8001198:	400b      	ands	r3, r1
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800119e:	b008      	add	sp, #32
 80011a0:	bd10      	pop	{r4, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	40005400 	.word	0x40005400
 80011a8:	40021000 	.word	0x40021000

080011ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011ac:	b510      	push	{r4, lr}
 80011ae:	0004      	movs	r4, r0
 80011b0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	2214      	movs	r2, #20
 80011b4:	2100      	movs	r1, #0
 80011b6:	a803      	add	r0, sp, #12
 80011b8:	f000 f8e9 	bl	800138e <memset>
  if(hspi->Instance==SPI1)
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_SPI_MspInit+0x58>)
 80011be:	6822      	ldr	r2, [r4, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d11d      	bne.n	8001200 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011c4:	2080      	movs	r0, #128	; 0x80
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_SPI_MspInit+0x5c>)
 80011c8:	0140      	lsls	r0, r0, #5
 80011ca:	6999      	ldr	r1, [r3, #24]
 80011cc:	4301      	orrs	r1, r0
 80011ce:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011d2:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011d6:	4002      	ands	r2, r0
 80011d8:	9201      	str	r2, [sp, #4]
 80011da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	430a      	orrs	r2, r1
 80011e2:	615a      	str	r2, [r3, #20]
 80011e4:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	400b      	ands	r3, r1
 80011ea:	9302      	str	r3, [sp, #8]
 80011ec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011ee:	23e0      	movs	r3, #224	; 0xe0
 80011f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	3bde      	subs	r3, #222	; 0xde
 80011f4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f8:	3301      	adds	r3, #1
 80011fa:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f7ff f894 	bl	8000328 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001200:	b008      	add	sp, #32
 8001202:	bd10      	pop	{r4, pc}
 8001204:	40013000 	.word	0x40013000
 8001208:	40021000 	.word	0x40021000

0800120c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800120c:	b510      	push	{r4, lr}
 800120e:	0004      	movs	r4, r0
 8001210:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	2214      	movs	r2, #20
 8001214:	2100      	movs	r1, #0
 8001216:	a803      	add	r0, sp, #12
 8001218:	f000 f8b9 	bl	800138e <memset>
  if(huart->Instance==USART1)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_UART_MspInit+0x5c>)
 800121e:	6822      	ldr	r2, [r4, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d11f      	bne.n	8001264 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001224:	2080      	movs	r0, #128	; 0x80
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_UART_MspInit+0x60>)
 8001228:	01c0      	lsls	r0, r0, #7
 800122a:	6999      	ldr	r1, [r3, #24]
 800122c:	4301      	orrs	r1, r0
 800122e:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001232:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8001236:	4002      	ands	r2, r0
 8001238:	9201      	str	r2, [sp, #4]
 800123a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	430a      	orrs	r2, r1
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	400b      	ands	r3, r1
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800124e:	230c      	movs	r3, #12
 8001250:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	3b0a      	subs	r3, #10
 8001254:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001256:	3301      	adds	r3, #1
 8001258:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800125c:	3b02      	subs	r3, #2
 800125e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f7ff f862 	bl	8000328 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001264:	b008      	add	sp, #32
 8001266:	bd10      	pop	{r4, pc}
 8001268:	40013800 	.word	0x40013800
 800126c:	40021000 	.word	0x40021000

08001270 <NMI_Handler>:
 8001270:	4770      	bx	lr

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler>

08001274 <SVC_Handler>:
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	4770      	bx	lr

08001278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001278:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127a:	f7fe fffd 	bl	8000278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127e:	bd10      	pop	{r4, pc}

08001280 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001280:	2101      	movs	r1, #1
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001284:	4811      	ldr	r0, [pc, #68]	; (80012cc <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	4002      	ands	r2, r0
 8001290:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	480e      	ldr	r0, [pc, #56]	; (80012d0 <SystemInit+0x50>)
 8001296:	4002      	ands	r2, r0
 8001298:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <SystemInit+0x54>)
 800129e:	4002      	ands	r2, r0
 80012a0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <SystemInit+0x58>)
 80012a6:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80012a8:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80012aa:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80012ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ae:	4382      	bics	r2, r0
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80012b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <SystemInit+0x5c>)
 80012b6:	4002      	ands	r2, r0
 80012b8:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80012ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012bc:	438a      	bics	r2, r1
 80012be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]

}
 80012c4:	4770      	bx	lr
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	40021000 	.word	0x40021000
 80012cc:	08ffb80c 	.word	0x08ffb80c
 80012d0:	fef6ffff 	.word	0xfef6ffff
 80012d4:	fffbffff 	.word	0xfffbffff
 80012d8:	ffc0ffff 	.word	0xffc0ffff
 80012dc:	fffffeec 	.word	0xfffffeec

080012e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e4:	480d      	ldr	r0, [pc, #52]	; (800131c <LoopForever+0x6>)
  ldr r1, =_edata
 80012e6:	490e      	ldr	r1, [pc, #56]	; (8001320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e8:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <LoopForever+0xe>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012fc:	4c0b      	ldr	r4, [pc, #44]	; (800132c <LoopForever+0x16>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800130a:	f7ff ffb9 	bl	8001280 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800130e:	f000 f811 	bl	8001334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001312:	f7ff fe5f 	bl	8000fd4 <main>

08001316 <LoopForever>:

LoopForever:
    b LoopForever
 8001316:	e7fe      	b.n	8001316 <LoopForever>
  ldr   r0, =_estack
 8001318:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001320:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001324:	080013fc 	.word	0x080013fc
  ldr r2, =_sbss
 8001328:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800132c:	20000144 	.word	0x20000144

08001330 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC1_IRQHandler>
	...

08001334 <__libc_init_array>:
 8001334:	b570      	push	{r4, r5, r6, lr}
 8001336:	2600      	movs	r6, #0
 8001338:	4d0c      	ldr	r5, [pc, #48]	; (800136c <__libc_init_array+0x38>)
 800133a:	4c0d      	ldr	r4, [pc, #52]	; (8001370 <__libc_init_array+0x3c>)
 800133c:	1b64      	subs	r4, r4, r5
 800133e:	10a4      	asrs	r4, r4, #2
 8001340:	42a6      	cmp	r6, r4
 8001342:	d109      	bne.n	8001358 <__libc_init_array+0x24>
 8001344:	2600      	movs	r6, #0
 8001346:	f000 f82b 	bl	80013a0 <_init>
 800134a:	4d0a      	ldr	r5, [pc, #40]	; (8001374 <__libc_init_array+0x40>)
 800134c:	4c0a      	ldr	r4, [pc, #40]	; (8001378 <__libc_init_array+0x44>)
 800134e:	1b64      	subs	r4, r4, r5
 8001350:	10a4      	asrs	r4, r4, #2
 8001352:	42a6      	cmp	r6, r4
 8001354:	d105      	bne.n	8001362 <__libc_init_array+0x2e>
 8001356:	bd70      	pop	{r4, r5, r6, pc}
 8001358:	00b3      	lsls	r3, r6, #2
 800135a:	58eb      	ldr	r3, [r5, r3]
 800135c:	4798      	blx	r3
 800135e:	3601      	adds	r6, #1
 8001360:	e7ee      	b.n	8001340 <__libc_init_array+0xc>
 8001362:	00b3      	lsls	r3, r6, #2
 8001364:	58eb      	ldr	r3, [r5, r3]
 8001366:	4798      	blx	r3
 8001368:	3601      	adds	r6, #1
 800136a:	e7f2      	b.n	8001352 <__libc_init_array+0x1e>
 800136c:	080013f4 	.word	0x080013f4
 8001370:	080013f4 	.word	0x080013f4
 8001374:	080013f4 	.word	0x080013f4
 8001378:	080013f8 	.word	0x080013f8

0800137c <memcpy>:
 800137c:	2300      	movs	r3, #0
 800137e:	b510      	push	{r4, lr}
 8001380:	429a      	cmp	r2, r3
 8001382:	d100      	bne.n	8001386 <memcpy+0xa>
 8001384:	bd10      	pop	{r4, pc}
 8001386:	5ccc      	ldrb	r4, [r1, r3]
 8001388:	54c4      	strb	r4, [r0, r3]
 800138a:	3301      	adds	r3, #1
 800138c:	e7f8      	b.n	8001380 <memcpy+0x4>

0800138e <memset>:
 800138e:	0003      	movs	r3, r0
 8001390:	1882      	adds	r2, r0, r2
 8001392:	4293      	cmp	r3, r2
 8001394:	d100      	bne.n	8001398 <memset+0xa>
 8001396:	4770      	bx	lr
 8001398:	7019      	strb	r1, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	e7f9      	b.n	8001392 <memset+0x4>
	...

080013a0 <_init>:
 80013a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013a6:	bc08      	pop	{r3}
 80013a8:	469e      	mov	lr, r3
 80013aa:	4770      	bx	lr

080013ac <_fini>:
 80013ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013b2:	bc08      	pop	{r3}
 80013b4:	469e      	mov	lr, r3
 80013b6:	4770      	bx	lr
